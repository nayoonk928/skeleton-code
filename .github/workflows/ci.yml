name: Spring Boot & Gradle CI/CD & Test

on:
  push:
    branches:
      - main
#      - develop
  pull_request:
    branches:
      - main
#      - develop

permissions: write-all

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Java 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-database.yml
        run: |
          cd ./src/main/resources
          touch ./application-database.yml
          echo "${{ secrets.DATABASE }}" >> ./application-database.yml
        shell: bash

      - name: make application-redis.yml
        run: |
          cd ./src/main/resources
          touch ./application-redis.yml
          echo "${{ secrets.REDIS }}" >> ./application-redis.yml
        shell: bash

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Gradle Build 권한 부여
        run: chmod +x gradlew

      - name: Gradle Build (test 제외)
        run: ./gradlew clean build --exclude-task test

      - name: DockerHub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .

      - name: Docker Hub 이미지 푸시
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

      - name: Docker compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm $(sudo docker ps -a)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
            docker-compose up -d
            sudo docker image prune -f

  # JUnit 테스트
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Java 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Build 권한 부여
        run: chmod +x gradlew -x test

      - name: 테스트 수행
        run: ./gradlew build

      - name: 테스트 결과를 PR에 코멘트로 등록
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: 디스코드 알림
        if: ${{ failure() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: '테스트가 실패했습니다.'